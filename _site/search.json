[
  {
    "objectID": "pages/technical_writing.html",
    "href": "pages/technical_writing.html",
    "title": "junwkim's blog",
    "section": "",
    "text": "Working In Progess\n\n\nNot Written Yet\n\n\n\nJunwoo Kim\n\n\nNov 11, 1111\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pages/technical_writing/post3.html",
    "href": "pages/technical_writing/post3.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/technical_writing/post1.html",
    "href": "pages/technical_writing/post1.html",
    "title": "Working In Progess",
    "section": "",
    "text": "Working In Progess"
  },
  {
    "objectID": "pages/technical_writing/post4.html",
    "href": "pages/technical_writing/post4.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/papers/post3.html",
    "href": "pages/papers/post3.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/papers/post1.html",
    "href": "pages/papers/post1.html",
    "title": "Working In Progess",
    "section": "",
    "text": "Working In Progess"
  },
  {
    "objectID": "pages/papers/post4.html",
    "href": "pages/papers/post4.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/posts/gpt_base_blog.html",
    "href": "pages/posts/gpt_base_blog.html",
    "title": "GPTs Service로 개인블로그 만들기",
    "section": "",
    "text": "오랫동안 notion, confluence wiki 등 많은 블로그 서비스를 시도해 왔습니다. 어떤 도구는 지나치게 자유도가 높고 어떤 도구는 자유도가 낮은 대신 많은 기능을 제공했지만, 오히려 그게 불편해져서 그 중간 사이 어딘가의 포스팅 도구를 찾았습니다.\n마침 같은 팀에서 근무하는 분이 Quarto를 추천해주셨고, 이를 활용해 블로그를 개발할 때 Claude3(Opus, Sonnet)을 적극적으로 사용했는데 아마도 직접적으로 프론트업계에 종사하지 않는 엔지니어/과학자 분들에게 도움이 될까 싶어 그 과정을 남깁니다."
  },
  {
    "objectID": "pages/posts/gpt_base_blog.html#개요",
    "href": "pages/posts/gpt_base_blog.html#개요",
    "title": "GPTs Service로 개인블로그 만들기",
    "section": "",
    "text": "오랫동안 notion, confluence wiki 등 많은 블로그 서비스를 시도해 왔습니다. 어떤 도구는 지나치게 자유도가 높고 어떤 도구는 자유도가 낮은 대신 많은 기능을 제공했지만, 오히려 그게 불편해져서 그 중간 사이 어딘가의 포스팅 도구를 찾았습니다.\n마침 같은 팀에서 근무하는 분이 Quarto를 추천해주셨고, 이를 활용해 블로그를 개발할 때 Claude3(Opus, Sonnet)을 적극적으로 사용했는데 아마도 직접적으로 프론트업계에 종사하지 않는 엔지니어/과학자 분들에게 도움이 될까 싶어 그 과정을 남깁니다."
  },
  {
    "objectID": "pages/posts/gpt_base_blog.html#quarto-소개",
    "href": "pages/posts/gpt_base_blog.html#quarto-소개",
    "title": "GPTs Service로 개인블로그 만들기",
    "section": "Quarto 소개",
    "text": "Quarto 소개\nQuarto 데이터 사이언스 홈페이지에서는\n“Quarto 는 Pandoc에 기반한 오픈소스 과학기술 출판시스템이다. 하지만 특정 언어에 종속되지 않고 R, 파이썬, 쥴리아, 자바스크립트(Observable JS) 를 지원하고 있으며 이를 통해 다음 출판 저작물 작성이 가능하다.”\n라고 설명하고 있습니다. 개인적으로는 깔끔한 Layout을 제공하고, 마크다운 문법을 기반으로 동작하며 필요시에는 어렵지 않게 커스터마이징 할 수 있다는게 가장 큰 장점으로 생각합니다.\n\nInstall\nQuarto 홈페이지에 들어가서 Get Started 탭을 누르면 자신의 환경에 따라 설치할 수 있는 가이드를 제시해줍니다. 구글링으로 검색하면 여러가지 terminal command를 제시해주지만 해당 문서에서 가이드하는대로 시도하는게 가장 좋습니다. 저는 MacOS 유저이고, 터미널에서 vanilla vim으로 작업을 좋아하기 때문에 Quarto를 설치하기만 했습니다.\n\nhttps://quarto.org/docs/get-started/\n\n\n\n첫 화면\nQuarto를 사용하면 가장 먼저 _quarto.yaml을 작성해야합니다. 사실 글 제목인 Claude에게 물었을 때는 main.qmd를 먼저 작성하라고 안내해줬지만, 지금 작업하는 것이 웹페이지로 배포하기 위함이라는 사실을 인지시켜주면 다음과 같이 답변해줍니다.\n\n\n\nhow to build quarto website blog?\n\n\n실제로는 저는 다음과 같은 _quarto.yml을 작성했습니다.\nproject:\n  type: website\n  preview:\n    port: 4200\n\nwebsite:\n  title: \"junwkim's blog\"\n  description: \"technical writing about CS/CE\"\n  navbar:\n    background: \"#0a3e3c\"\n    foreground: White\n    left:\n      - href: pages/introduce.qmd\n        text: introduce\n    right:\n      - href: main.qmd\n        text: Back To Home\n\nformat:\n  html:\n    css: styles.css\n    js: script.js\n위 yaml 파일에서 명시하는 것은 다음과 같습니다.\n\n페이지의 이름은 “junkim’s blog” 일 것\nNavigation Bar 설정\n\nNavigation Bar의 색상은 Dark Teal(#0a3e3c) 일것\nintroduce page를 왼쪽, Back To Home page를 오른쪽에 둘 것.\n\n\n한편, _quarto.yml 기반으로 동작하는 quarto application은 index.qmd 를 가장 먼저 보도록 설정되어 있습니다. index.qmd 파일은 다음과 같이 작성해주었습니다.\n---\npagetitle: \"Home\"\n---\n\n```{=html}\n&lt;meta http-equiv=\"refresh\" content=\"0; url='./main.html'\" /&gt;\nindex.qmd에서는 홈의 가장 기본으로 바라보는 페이지가 main.qmd에서 그려주는 형상이 되도록 지정했습니다. 따라서 블로그의 어디에서든 홈에 접속한다면 main.qmd가 그려주는 페이지로 진입하게 됩니다.\n\n\n\nhome main page\n\n\n\n\n세부 화면 구성\n보시면 아시겠지만, 지금 보는 화면은 저희가 작성한 것보다는 좀더 많은 내용들이 추가가 되어 있습니다. 먼저 introduce라는 페이지를 구성하겠습니다.\n---\ntitle: \"\"\nformat:\n  html:\n    toc: false\n---\n\n## 소개글\n안녕하세요. 제 이름은 김준우입니다.\n서울/경기권에 거주하고 있고, 현재는 Machine Learning Engineer로 Gmarket에서 근무하고 있습니다. AI/ML 알고리즘과 엔지니어링 요소를 활용하여 세상에 유용한 application을 제공하는데에 관심이 있습니다.\n이렇게 작성한 마크다운 문법은 다음과 같이 나타납니다. \n이어서, 홈화면에 나타난 카드 횡스크롤 방식의 UI를 구현해보겠습니다. 요즘 넷플릭스처럼 콘텐츠를 가로로 스크롤하며 제공해주는 방식의 UI가 매우 유행하고 있습니다. 제가 생각하기로는 콘텐츠가 아주 많아진 요즘 시대에는 거의 필수에 가까울 것으로 생각되는 디자인 요소 중 하나라고 생각합니다.\nQuarto에서는 내가 작성한 게시글들이라는 콘텐츠를 Listing해서 보여주는 기능이 있습니다. 홈페이지에서 제공하는 document에서 다양한 형식의 quarto content 작성방식을 제공하고 있습니다.\n\nhttps://quarto.org/docs/reference/projects/websites.html#project\n\n위 링크에서 Listing 항목을 살펴보면 어떤 콘텐츠를 담을 것인지, List의 이름은 무엇으로 할 것인지, 최대로 보여줄 콘텐츠의 갯수, 정렬방식을 지정할 수 있음을 알 수 있습니다. 특히, type 항목에서 List 혹은 Grid를 지정할 수 있습니다. 물론 List와 Grid 또한 충분히 이쁜 UI지만 저희가 하고 싶은 것은 횡스크롤 형식의 카드UI입니다.\nlisting:\n    - id: \"list1\"\n      contents: pages/posts\n      sort: \"date asc\"\n      type: custom\n      categories: false\n      sort-ui: false\n      filter-ui: false\n      feed: false\n      template: listing.ejs\n저는 실제로는 문서정독을 통해 EJS(Embedded JavaScript)라는 기능을 통해 사용자가 직접 정의한 UI를 입힐 수 있음을 파악했지만, 갖은 노력을 다해도 도저히 구현할 수 없었습니다. 그래서 Claude에게 다시한번 물어보았습니다. Claude는 EJS 문법 작성과 CSS파일 생성을 거의 대부분 수행하였지만, 사소한 오류와 에러들이 있었고 이를 바로 잡는데에 대부분의 시간을 보냈습니다.\n\n\n\nclaude도 디버깅을 잘 못할 수 있다.\n\n\n현존 GPTs 서비스 중 가장 강력하다고 알려진 Claude 또한 이미지 입력까지 제공받았음에도 유료 API Quoto를 3번이나 소진할 떄까지 올바른 방법을 제시하지 못했습니다. 그러던 중 클로드가 다음과 같은 제안을 해왔습니다.\n\nstyle.css\n\n.card-container {\n  display: flex;\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n  scroll-padding: 1rem;\n}\n\n.card {\n  flex: 0 0 200px;\n  margin-right: 1rem;\n  padding: 1rem;\n  background: #f1f1f1;\n  border-radius: 5px;\n  scroll-snap-align: center;\n  text-decoration: none;\n  color: inherit;\n  display: flex;\n  flex-direction: column;\n}\n\n.card h3 {\n  margin: 0;\n}\n\nlisting.ejs\n\n&lt;div class=\"card-container\"&gt;\n&lt;% for (const post of collections.all.pages/posts) { %&gt;\n  &lt;a href=\"&lt;%= post.url %&gt;\" class=\"card\"&gt;\n    &lt;h3&gt;&lt;%= post.data.title %&gt;&lt;/h3&gt;\n  &lt;/a&gt;\n&lt;% } %&gt;\n&lt;/div&gt;\n위 코드를 적용하자, 드디어 초기에 제가 원하던 컨셉과 비슷한 화면 view가 생성되었습니다! \n한번 기능이 완성되고 나서부터는 원하는 UI를 구현하는 것은 비교적 빠르게 수행 가능했습니다. 사소한 디버깅이나 레이아웃을 수정하는 오류는 claude를 통해 해결하였고, 추가적인 style 변화를 위해 몇가지 요소를 추가했습니다.\n.card-container {\n  display: flex;\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n  scroll-padding: 1rem;\n}\n\n.card {\n  width: 200px;\n  height: 265px;\n  margin-right: 1rem;\n  padding: 1rem;\n  background: #e0f2ef;\n  border-radius: 5px;\n  scroll-snap-align: center;\n  text-decoration: none;\n  color: inherit;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.card-text {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-word;\n  line-height: 1.2;\n  max-height: calc(1.2em * 3);\n  margin: 0.5rem;\n}\n\n.card-image {\n  width: 100%;\n  height: 160px;\n  marin: 1rem;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  border: 1px solid #e0e0e0;\n}\n적용한 카드 스타일은 다음과 같습니다.\n\ncard container를 통해 횡 scroll UI를 구현\ncard style 정의를 통해 가로/세로 높이와 카드 배경색 조정, 테두리 둥근 효과 등을 부여\ncard-text style 정의를 통해 카드 내부의 text는 어떤 높이에서 시작하고 어디까지 표시될지, 표시영역을 벗어나면 어떻게 처리될지를 정의\ncard-image style 정의를 통해 카드 내부에 이미지가 표기되도록 하고, 해당 이미지의 여러 특성을 정의\n\n\n\n정리하며\n이러한 작업을 하면서 놀라운 부분은, 저는 프론트에 대해서는 아주 기본적인 내용들만 알고 있었을 뿐임에도 Claude와 함께 상호작용하며 저만의 멋진 블로그를 만드는데에 그렇게 큰 힘이 들지 않았다는 것입니다. 뿐만 아니라, 제가 작성한 대부분의 코드는 Claude가 생성해 준 것이고 제가 고려한 부분은 디자인적 요소 외에는 거의 없었다고 봐도 무방할 것 같습니다.\n만약 이 글을 읽으시는 독자분께서 블로그는 갖고 싶지만 프론트를 잘 모르신다고 한다면, Claude를 기반으로 아주 맨땅에서부터 헤딩해도 좋은 결과물을 얻을 수 있을 것이라 생각합니다. 끝으로, 여태까지 작업한 코드는 다음 github에서 참고하실 수 있습니다.\n\nhttps://github.com/junwoo-ctrl/junwkim-blog-quarto"
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "junwkim's blog",
    "section": "",
    "text": "technical writing\n\n\n  Working In Progess Junwoo Kim, Nov 11, 1111 \n\n\nNo matching items\n\n\n\nPapers\n\n\n  Working In Progess Junwoo Kim, Nov 11, 1111 \n\n\nNo matching items\n\n\n\nPosts\n\n\n  GPTs Service로 개인블로그 만들기 Junwoo Kim, Mar 4, 2024 \n\n\nNo matching items"
  },
  {
    "objectID": "pages/introduce.html",
    "href": "pages/introduce.html",
    "title": "junwkim's blog",
    "section": "",
    "text": "안녕하세요. 제 이름은 김준우입니다. 서울/경기권에 거주하고 있고, 현재는 Machine Learning Engineer로 Gmarket에서 근무하고 있습니다. AI/ML 알고리즘과 엔지니어링 요소를 활용하여 세상에 유용한 application을 제공하는데에 관심이 있습니다."
  },
  {
    "objectID": "pages/introduce.html#소개글",
    "href": "pages/introduce.html#소개글",
    "title": "junwkim's blog",
    "section": "",
    "text": "안녕하세요. 제 이름은 김준우입니다. 서울/경기권에 거주하고 있고, 현재는 Machine Learning Engineer로 Gmarket에서 근무하고 있습니다. AI/ML 알고리즘과 엔지니어링 요소를 활용하여 세상에 유용한 application을 제공하는데에 관심이 있습니다."
  },
  {
    "objectID": "pages/introduce.html#career",
    "href": "pages/introduce.html#career",
    "title": "junwkim's blog",
    "section": "Career",
    "text": "Career\n\nMakinarocks(Machine Learning Engineer)\n\n2020.01 - 2021.07 (Seoul)\n태양광 발전량 예측 프로젝트(SK 계열사 협업프로젝트)\n\n일기예보 데이터 분석\nRegression 기반 모델개발(Tree Based, NN Based)\n\n발전량 예측서비스 개발\n\nAWS EKS 기반 SaaS 개발\n\n\n\n\nMusinsa(Search Engineer)\n\n2021.08 - 2022.07 (Seoul)\n이미지 검색서비스 개발\n\n기 사용 Solution을 Internal로 전환하여 비용절감\nObject Detection, Classification, Vector Embedding 모델 개발\nElasticsearch 기반 vector 검색 및 Airflow Pipeline 개발\nAWS EKS를 활용한 Microservice 개발\n\n연관검색어 추천기능 개발\n\n검색결과가 없는 페이지(SNR)에서의 UX 지표개선\nFast-Text 기반 vector embedidng 모델개발\nContinuous Training / Update 가능한 Airflow Pipeline 개발\n연관검색결과를 제공하는 Internal API Server 개발\n\n팀내 Python Convention 및 Data 분석 Lead\n\n\n\nGmarket(Machine Learning Engineer)\n\n2022.08 - Present\n홈개인화 서비스개발\n\n비개인화 유저대상 GMV 26% 개선\nPhase 1(tag 검색기반 개인화)\n\nlong/short term 유저행동을 기반으로 Tag 추출\nElasticsearch에 적재된 상품풀에 검색하여 ranking되는 상품리스트 제공\nElasticsearch Query Tunning 및 Spring API Server 개발\n\nPhase 2(vector 검색기반 semantic 개인화)\n\n전문검색(Full-Text) 기반 개인화의 상품 편중현상 해결\nNext Step Item을 예측하는 Transformer 기반의 vector model 개발\nElasticsearch 기반 vector 검색 및 Airflow Pipeline 개발\nCPU 추론 최적화를 통한 GPU 자원절약\n\nPhase 3(re-ranking을 통한 micro 개인화)\n\n개인화된 ranking 제공 이후, User Action에 따른 Optimized Ranking 제공 및 Filter Bubble 해결\nItem Score / User Score 집계 후, 합산계산하는 방식의 Re-Ranking list 제공"
  },
  {
    "objectID": "pages/papers/post5.html",
    "href": "pages/papers/post5.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/papers/post2.html",
    "href": "pages/papers/post2.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/papers.html",
    "href": "pages/papers.html",
    "title": "junwkim's blog",
    "section": "",
    "text": "Working In Progess\n\n\nNot Written Yet\n\n\n\nJunwoo Kim\n\n\nNov 11, 1111\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pages/technical_writing/post5.html",
    "href": "pages/technical_writing/post5.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/technical_writing/post2.html",
    "href": "pages/technical_writing/post2.html",
    "title": "Not written yet",
    "section": "",
    "text": "Not written yet"
  },
  {
    "objectID": "pages/posts.html",
    "href": "pages/posts.html",
    "title": "junwkim's blog",
    "section": "",
    "text": "GPTs Service로 개인블로그 만들기\n\n\nClaude3만으로 Quarto 기반 블로그 만들기\n\n\n\nJunwoo Kim\n\n\nMar 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pages/papers/progress.html",
    "href": "pages/papers/progress.html",
    "title": "Working In Progess",
    "section": "",
    "text": "Working In Progess"
  }
]